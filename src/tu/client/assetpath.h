#ifndef TU_CLIENT_ASSETPATH_H
#define TU_CLIENT_ASSETPATH_H

#include <base/math.h>

namespace tu
{

template<int NBTYPES, int NBSRCS, int NBFLAGS, int ID2SIZE=0>
class CGenericPath
{
public:
	int m_Path;
	
	enum
	{
		TYPESIZE = Log2<(NearestPowerOfTwo<NBTYPES>::result)>::result,
		SRCSIZE = Log2<(NearestPowerOfTwo<NBSRCS>::result)>::result,
		FLAGSIZE = Log2<(NearestPowerOfTwo<NBFLAGS>::result)>::result,
		IDSIZE = 32 - FLAGSIZE - SRCSIZE - TYPESIZE - ID2SIZE,
		
		MASK_TYPE = ((0x1 << TYPESIZE)-1),
		MASK_SRC = ((0x1 << SRCSIZE)-1)<<TYPESIZE,
		MASK_FLAGS = ((0x1 << FLAGSIZE)-1)<<(TYPESIZE+SRCSIZE),
		MASK_ID = ((0x1 << IDSIZE)-1)<<(TYPESIZE+SRCSIZE+FLAGSIZE),
		MASK_ID2 = (ID2SIZE > 0 ? ((0x1 << ID2SIZE)-1)<<(TYPESIZE+SRCSIZE+FLAGSIZE+IDSIZE) : 0x0),
		
		TYPE_SHIFT = 0,
		SRC_SHIFT = TYPESIZE,
		FLAGS_SHIFT = TYPESIZE+SRCSIZE,
		ID_SHIFT = TYPESIZE+SRCSIZE+FLAGSIZE,
		ID2_SHIFT = TYPESIZE+SRCSIZE+FLAGSIZE+IDSIZE,
		
		UNDEFINED = -1,
	};
	
public:
	CGenericPath() : m_Path(UNDEFINED) { }
	CGenericPath(int PathInt) : m_Path(PathInt) { }
	CGenericPath(int Type, int Source, int Flags, int Id) : m_Path((Type << TYPE_SHIFT) + (Source << SRC_SHIFT) + (Flags << FLAGS_SHIFT) + (Id << ID_SHIFT)) { }
	CGenericPath(int Type, int Source, int Flags, int Id, int Id2) : m_Path((Type << TYPE_SHIFT) + (Source << SRC_SHIFT) + (Flags << FLAGS_SHIFT) + (Id << ID_SHIFT) + (Id2 << ID2_SHIFT)) { }
	
	operator int() const { return m_Path; }
	
	inline int GetId() const { return (m_Path & MASK_ID) >> ID_SHIFT; }
	inline int GetId2() const { return (m_Path & MASK_ID2) >> ID2_SHIFT; }
	inline int GetType() const { return (m_Path & MASK_TYPE) >> TYPE_SHIFT; }
	inline int GetSource() const { return (m_Path & MASK_SRC) >> SRC_SHIFT; }
	inline int GetFlags() const { return (m_Path & MASK_FLAGS) >> FLAGS_SHIFT; }
	
	inline void SetId(int Id) { m_Path = (m_Path & ~MASK_ID) + (Id << ID_SHIFT); }
	inline void SetId2(int Id) { m_Path = (m_Path & ~MASK_ID2) + (Id << ID2_SHIFT); }
	
	inline bool IsNull() const { return m_Path == UNDEFINED; }
	inline bool operator==(const CGenericPath& path) const { return path.m_Path == m_Path; }
	
	inline void OnIdDeleted(const CGenericPath& Path)
	{
		if(IsNull() || Path.IsNull())
			return;
		
		if((m_Path & ~MASK_ID) != (Path.m_Path & ~MASK_ID))
			return;
		
		int DeletedId = Path.GetId();
		int CurrentId = GetId();
		
		if(CurrentId == DeletedId)
			m_Path = UNDEFINED;
		else if(CurrentId > DeletedId)
			SetId(CurrentId-1);
	}
};

//TAG_NEW_ASSET
#define TU_ASSETTYPE_LIST enum\
	{\
		TYPE_IMAGE = 0,\
		TYPE_SPRITE,\
		TYPE_SKELETON,\
		TYPE_SKELETONANIMATION,\
		TYPE_SKELETONSKIN,\
		TYPE_CHARACTER,\
		TYPE_CHARACTERPART,\
		TYPE_WEAPON,\
		TYPE_MAP,\
		TYPE_MAPGROUP,\
		TYPE_MAPZONETILES,\
		TYPE_MAPLAYERTILES,\
		TYPE_MAPLAYERQUADS,\
		TYPE_ZONETYPE,\
		TYPE_GUIRECTSTYLE,\
		TYPE_GUILINESTYLE,\
		TYPE_GUIBOXSTYLE,\
		TYPE_GUISCROLLBARSTYLE,\
		TYPE_GUITABSSTYLE,\
		NUM_ASSETTYPES,\
	};

/*
 * System: Assets that are loaded when the game start and that can't be edited
 */

#define TU_ASSETSOURCE_LIST enum\
	{\
		SRC_SYSTEM=0,\
		SRC_UNIVERSE,\
		SRC_WORLD,\
		SRC_LAND,\
		SRC_SKIN,\
		NUM_SOURCES\
	};

namespace _dontuseit { TU_ASSETSOURCE_LIST }
namespace _dontuseit { TU_ASSETTYPE_LIST }

class CAssetPath : public CGenericPath<_dontuseit::NUM_ASSETTYPES, _dontuseit::NUM_SOURCES, 0>
{
public:
	TU_ASSETSOURCE_LIST
	TU_ASSETTYPE_LIST

public:
	CAssetPath() : CGenericPath() { }
	CAssetPath(int PathInt) : CGenericPath(PathInt) { }
	CAssetPath(int Type, int Source, int Id) : CGenericPath(Type, Source, 0x0, Id) { }
	
	//Static constructors	
	static inline CAssetPath Null() { return CAssetPath(CGenericPath::UNDEFINED); }
	
	static inline CAssetPath Asset(int Type, int Source, int Id) { return CAssetPath(Type, Source, Id); }
	
	static inline CAssetPath System(int Type, int Id) { return Asset(Type, SRC_SYSTEM, Id); }
	static inline CAssetPath Universe(int Type, int Id) { return Asset(Type, SRC_UNIVERSE, Id); }
	static inline CAssetPath World(int Type, int Id) { return Asset(Type, SRC_WORLD, Id); }
	static inline CAssetPath Skin(int Type, int Id) { return Asset(Type, SRC_SKIN, Id); }
	static inline CAssetPath Land(int Type, int Id) { return Asset(Type, SRC_LAND, Id); }
	
	static inline CAssetPath ImageSystem(int Id) { return Asset(TYPE_IMAGE, SRC_SYSTEM, Id); }
	static inline CAssetPath SpriteSystem(int Id) { return Asset(TYPE_SPRITE, SRC_SYSTEM, Id); }
	static inline CAssetPath GuiRectStyleSystem(int Id) { return Asset(TYPE_GUIRECTSTYLE, SRC_SYSTEM, Id); }
	static inline CAssetPath GuiLineStyleSystem(int Id) { return Asset(TYPE_GUILINESTYLE, SRC_SYSTEM, Id); }
	static inline CAssetPath GuiBoxStyleSystem(int Id) { return Asset(TYPE_GUIBOXSTYLE, SRC_SYSTEM, Id); }
	static inline CAssetPath GuiScrollbarStyleSystem(int Id) { return Asset(TYPE_GUISCROLLBARSTYLE, SRC_SYSTEM, Id); }
	static inline CAssetPath GuiTabsStyleSystem(int Id) { return Asset(TYPE_GUITABSSTYLE, SRC_SYSTEM, Id); }
	
	static inline CAssetPath SpriteUniverse(int Id) { return Asset(TYPE_SPRITE, SRC_UNIVERSE, Id); }
	
	static inline int TypeToStoredType(int Type) { return Type+1; }
	static inline int StoredTypeToType(int StoredType) { return StoredType-1; }
};

//Item position
enum
{
	ITEMLAYER_UNDER_ITEM=0,
	ITEMLAYER_OVER_ITEM,
	ITEMLAYER_OVER_PLAYER,
	ITEMLAYER_UNDER_PARTICULES,
	ITEMLAYER_OVER_PARTICULES,
	ITEMLAYER_UNDER_NAMEPLATES,
	ITEMLAYER_OVER_NAMEPLATES,
	NUM_ITEMLAYER,
	
	ITEMLAYER_PREPLAYER = ITEMLAYER_UNDER_ITEM,
};

//Options
enum
{
	TEXTALIGN_CENTER = 0,
	TEXTALIGN_RIGHT_BOTTOM,
	TEXTALIGN_RIGHT_CENTER,
	TEXTALIGN_RIGHT_TOP,
	TEXTALIGN_CENTER_TOP,
	TEXTALIGN_LEFT_TOP,
	TEXTALIGN_LEFT_CENTER,
	TEXTALIGN_LEFT_BOTTOM,
	TEXTALIGN_CENTER_BOTTOM,
};

/* System *************************************************************/

enum
{
	IMAGE_ASSETSEDITOR = 0,
};

enum
{
	SPRITE_CURSOR=0,
	SPRITE_CURSOR_TRANSLATEX,
	SPRITE_CURSOR_TRANSLATEY,
	SPRITE_CURSOR_TEXT,
	
	SPRITE_ICON_DEFAULT,
	SPRITE_ICON_DECREASE,
	SPRITE_ICON_INCREASE,
	SPRITE_ICON_DELETE,
	SPRITE_ICON_EDIT,
	SPRITE_ICON_VIEW,
	SPRITE_ICON_UP,
	SPRITE_ICON_DOWN,
	SPRITE_ICON_DUPLICATE,
	SPRITE_ICON_SAVE,
	SPRITE_ICON_LOAD,
	SPRITE_ICON_FIRST_FRAME,
	SPRITE_ICON_PREV_FRAME,
	SPRITE_ICON_PLAY,
	SPRITE_ICON_PAUSE,
	SPRITE_ICON_NEXT_FRAME,
	SPRITE_ICON_LAST_FRAME,
	SPRITE_ICON_VFLIP,
	SPRITE_ICON_HFLIP,
	SPRITE_ICON_ROTATE_CW,
	SPRITE_ICON_ROTATE_CCW,
	SPRITE_ICON_SELECTIONSTAMP,
	SPRITE_ICON_SELECTIONFILL,
	SPRITE_ICON_GRID,
	SPRITE_ICON_NONE,
	SPRITE_ICON_FOLDER,
	SPRITE_ICON_TILES,
	SPRITE_ICON_QUAD,
	SPRITE_ICON_WEAPON,
	SPRITE_ICON_MAP,
	SPRITE_ICON_ZONETILES,
	SPRITE_ICON_ZONETYPE,
	SPRITE_ICON_ENTITYTYPE,
	SPRITE_ICON_ASSET,
	SPRITE_ICON_UNIVERSE,
	SPRITE_ICON_WORLD,
	SPRITE_ICON_LAND,
	SPRITE_ICON_SKIN,
	SPRITE_ICON_LAYERS,
	SPRITE_ICON_BONE,
	SPRITE_ICON_SPRITE,
	SPRITE_ICON_IMAGE,
	SPRITE_ICON_SKELETON,
	SPRITE_ICON_SKELETONSKIN,
	SPRITE_ICON_SKELETONANIMATION,
	SPRITE_ICON_LAYERANIMATION,
	SPRITE_ICON_CHARACTER,
	SPRITE_ICON_CHARACTERPART,
	SPRITE_ICON_MOVE,
	SPRITE_ICON_TRANSLATE,
	SPRITE_ICON_TRANSLATE_X,
	SPRITE_ICON_TRANSLATE_Y,
	SPRITE_ICON_ROTATE,
	SPRITE_ICON_SCALE,
	SPRITE_ICON_SCALE_X,
	SPRITE_ICON_SCALE_Y,
	SPRITE_ICON_BONE_LENGTH,
	SPRITE_ICON_BONE_ADD,
	SPRITE_ICON_BONE_DELETE,
	SPRITE_ICON_BONE_ATTACH,
	SPRITE_ICON_FRAME_MOVE,
	SPRITE_ICON_FRAME_ADD,
	SPRITE_ICON_FRAME_DELETE,
	SPRITE_ICON_FRAMES,
	SPRITE_ICON_FRAME_COLOR,
	SPRITE_ICON_KEYFRAME_BONE,
	SPRITE_ICON_KEYFRAME_LAYER,
	SPRITE_ICON_COLORPICKER_RGB,
	SPRITE_ICON_COLORPICKER_HSV,
	SPRITE_ICON_COLORPICKER_SQUARE,
	SPRITE_ICON_COLORPICKER_WHEEL,
	SPRITE_ICON_GUIRECT,
	SPRITE_ICON_GUILINE,
	SPRITE_ICON_GUIBOX,
	SPRITE_ICON_GUISCROLLBAR,
	SPRITE_ICON_GUITABS,
	SPRITE_ICON_SYSTEM,
	
	SPRITE_GIZMOFRAME,
	SPRITE_GIZMOFRAME_SELECT,
	SPRITE_GIZMOFRAME_ADD,
	SPRITE_GIZMOFRAME_DELETE,
	SPRITE_GIZMOFRAME_COLOR,
	SPRITE_GIZMOFRAME_HIDDEN,
	SPRITE_GIZMOFRAME_COLORED_BG,
	SPRITE_GIZMOFRAME_COLORED_FG,
	
	SPRITE_GIZMO_VERTEX_BG,
	SPRITE_GIZMO_VERTEX_FG,
	SPRITE_GIZMO_PIVOT,
	SPRITE_GIZMO_SCALE,
	SPRITE_GIZMO_ROTATE,
	
	SPRITE_GIZMODIR_AIM,
	SPRITE_GIZMODIR_MOVE,
	SPRITE_GIZMODIR_HOOK,
};

enum
{
	SKELETON_PLACEHOLDER = 0,
};

enum
{
	PLACEHOLDERBONE_ROOT = 0,
};

enum
{
	PLACEHOLDERLAYER_COLOR = 0,
};

enum
{
	GUIRECTSTYLE_DEBUG=0,
	GUIRECTSTYLE_DEBUG_MOUSEOVER,
	GUIRECTSTYLE_SELECTION,
	GUIRECTSTYLE_STAMP,
	GUIRECTSTYLE_EDITOR_BUTTON,
	GUIRECTSTYLE_EDITOR_BUTTON_MO,
	GUIRECTSTYLE_EDITOR_BUTTON_HL,
	GUIRECTSTYLE_EDITOR_ENTRY,
	GUIRECTSTYLE_EDITOR_ENTRY_MO,
	GUIRECTSTYLE_EDITOR_POPUP,
	GUIRECTSTYLE_EDITOR_TABS_LAYOUT,
	GUIRECTSTYLE_EDITOR_TABS_CONTENT,
	GUIRECTSTYLE_EDITOR_TABS_INACTIVEBUTTON,
	GUIRECTSTYLE_EDITOR_TABS_ACTIVEBUTTON,
	GUIRECTSTYLE_EDITOR_VIEW,
};

enum
{
	GUILINESTYLE_SEPARATOR=0,
	GUILINESTYLE_EDITOR_SCROLLBAR_RAIL,
	GUILINESTYLE_EDITOR_SCROLLBAR_SLIDER,
};

enum
{
	GUIBOXSTYLE_DEBUG=0,
	GUIBOXSTYLE_EDITOR_LABEL,
	GUIBOXSTYLE_EDITOR_LABELHEADER,
	GUIBOXSTYLE_EDITOR_BUTTON,
	GUIBOXSTYLE_EDITOR_BUTTON_HL,
	GUIBOXSTYLE_EDITOR_ENTRY,
	GUIBOXSTYLE_EDITOR_POPUP,
	GUIBOXSTYLE_EDITOR_ASSETEDITBUTTON,
	GUIBOXSTYLE_EDITOR_LISTITEM,
	GUIBOXSTYLE_EDITOR_INACTIVELISTITEM,
	GUIBOXSTYLE_EDITOR_TABS_LAYOUT,
	GUIBOXSTYLE_EDITOR_TABS_CONTENT,
	GUIBOXSTYLE_EDITOR_TABS_BUTTONLIST,
	GUIBOXSTYLE_EDITOR_TABS_ACTIVEBUTTON,
	GUIBOXSTYLE_EDITOR_TABS_INACTIVEBUTTON,
	GUIBOXSTYLE_EDITOR_VIEW,
};

enum
{
	GUISCROLLBARSTYLE_EDITOR=0,
};

enum
{
	GUITABSSTYLE_EDITOR=0,
};

/* Universe ***********************************************************/
enum
{
	IMAGE_GAME = 0,
	IMAGE_PARTICLES,
	IMAGE_TEEBODYDEFAULT,
	IMAGE_TEEFEETDEFAULT,
	IMAGE_TEEHANDSDEFAULT,
	IMAGE_TEEEYESDEFAULT,
};

enum
{
	SPRITE_WHITESQUARE = 0,
	SPRITE_HAMMER,
	SPRITE_GUN,
	SPRITE_SHOTGUN,
	SPRITE_GRENADE,
	SPRITE_LASER,
	SPRITE_NINJA,
	SPRITE_GUN_MUZZLE1,
	SPRITE_GUN_MUZZLE2,
	SPRITE_GUN_MUZZLE3,
	SPRITE_SHOTGUN_MUZZLE1,
	SPRITE_SHOTGUN_MUZZLE2,
	SPRITE_SHOTGUN_MUZZLE3,
	SPRITE_NINJA_MUZZLE1,
	SPRITE_NINJA_MUZZLE2,
	SPRITE_NINJA_MUZZLE3,
	SPRITE_HAMMER_CURSOR,
	SPRITE_GUN_CURSOR,
	SPRITE_SHOTGUN_CURSOR,
	SPRITE_GRENADE_CURSOR,
	SPRITE_LASER_CURSOR,
	SPRITE_NINJA_CURSOR,
	SPRITE_HOOK_HEAD,
	SPRITE_HOOK_CHAIN,
	
	SPRITE_PART_SPLAT1,
	SPRITE_PART_SPLAT2,
	SPRITE_PART_SPLAT3,
	
	SPRITE_TEEBODYDEFAULT_SHADOW,
	SPRITE_TEEBODYDEFAULT_COLOR,
	SPRITE_TEEBODYDEFAULT_SHADING,
	SPRITE_TEEBODYDEFAULT_OUTLINE,
	
	SPRITE_TEEFEETDEFAULT_SHADOW,
	SPRITE_TEEFEETDEFAULT_COLOR,
	
	SPRITE_TEEHANDSDEFAULT_SHADOW,
	SPRITE_TEEHANDSDEFAULT_COLOR,
	
	SPRITE_TEEEYESDEFAULT_NORMAL,
	SPRITE_TEEEYESDEFAULT_ANGRY,
	SPRITE_TEEEYESDEFAULT_PAIN,
	SPRITE_TEEEYESDEFAULT_HAPPY,
	SPRITE_TEEEYESDEFAULT_FEAR,
};

enum
{
	LIST_GUN_MUZZLES = 0,
	LIST_SHOTGUN_MUZZLES,
	LIST_NINJA_MUZZLES,
	LIST_PART_SPLATS,
};

enum
{
	SKELETON_TEE=0,
	SKELETON_HAMMER,
	SKELETON_GUN,
	SKELETON_SHOTGUN,
};

enum
{
	TEEBONE_BODY = 0,
	TEEBONE_EYES,
	TEEBONE_BACKFOOT,
	TEEBONE_FRONTFOOT,
	TEEBONE_BACKARM,
	TEEBONE_BACKHAND,
	TEEBONE_FRONTARM,
	TEEBONE_FRONTHAND,
};

enum
{
	TEELAYER_ATTACH = 0,
	TEELAYER_BACKHANDSHADOW,
	TEELAYER_FRONTHANDSHADOW,
	TEELAYER_BACKFOOTSHADOW,
	TEELAYER_BODYSHADOW,
	TEELAYER_FRONTFOOTSHADOW,
	TEELAYER_BACKHAND,
	TEELAYER_FRONTHAND,
	TEELAYER_BACKFOOT,
	TEELAYER_DECORATION,
	TEELAYER_BODY,
	TEELAYER_MARKING,
	TEELAYER_OUTLINE,
	TEELAYER_EYES_NORMAL,
	TEELAYER_EYES_ANGRY,
	TEELAYER_EYES_PAIN,
	TEELAYER_EYES_HAPPY,
	TEELAYER_EYES_FEAR,
	TEELAYER_FRONTFOOT,
};

enum
{
	SKELETONSKIN_TEEBODYDEFAULT = 0,
	SKELETONSKIN_TEEFEETDEFAULT,
	SKELETONSKIN_TEEHANDSDEFAULT,
	SKELETONSKIN_TEEEYESDEFAULT,
	SKELETONSKIN_HAMMER,
	SKELETONSKIN_GUN,
	SKELETONSKIN_SHOTGUN,
};

enum
{
	SKELETONANIMATION_TEEIDLE = 0,
	SKELETONANIMATION_TEEAIR,
	SKELETONANIMATION_TEEAIR2,
	SKELETONANIMATION_TEEWALK,
	SKELETONANIMATION_HAMMERATTACK,
	SKELETONANIMATION_GUNATTACK,
	SKELETONANIMATION_SHOTGUNATTACK,
};

enum
{
	SKINPART_BODY=0,
	SKINPART_MARKING,
	SKINPART_DECORATION,
	SKINPART_HANDS,
	SKINPART_FEET,
	SKINPART_EYES,
};

enum
{
	CHARACTER_TEE=0,
};

enum
{
	CHARACTERPART_TEEBODYDEFAULT=0,
	CHARACTERPART_TEEFEETDEFAULT,
	CHARACTERPART_TEEHANDSDEFAULT,
	CHARACTERPART_TEEEYESDEFAULT,
};

enum
{
	WEAPON_HAMMER=0,
	WEAPON_GUN,
};

enum
{
	ZONETYPE_PHYSICS=0,
	ZONETYPE_DEATH,
};

enum
{
	ZONETYPEINDEX_PHYSICS_AIR=0,
	ZONETYPEINDEX_PHYSICS_GROUND=1,
	ZONETYPEINDEX_DEATH_DEATH=2,
	ZONETYPEINDEX_PHYSICS_NOHOOK=3,
};

}

#endif
